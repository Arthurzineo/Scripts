#!/usr/bin/env python3

import requests
import sys
import datetime
import os
import time
import argparse
from concurrent.futures import ThreadPoolExecutor

def menu():
    print("\n")
    print("\033[1;32m████████╗██╗   ██╗██╗   ██╗\033[0m")
    print("\033[1;32m╚══██╔══╝██║   ██║╚██╗ ██╔╝\033[0m")
    print("\033[1;32m   ██║   ██║   ██║ ╚████╔╝ \033[0m")
    print("\033[1;32m   ██║   ██║   ██║  ╚██╔╝  \033[0m")
    print("\033[1;32m   ██║   ╚██████╔╝   ██║   \033[0m")
    print("\033[1;32m   ╚═╝    ╚═════╝    ╚═╝   \033[0m")

def load_wordlist(path):
    with open(path, encoding="utf-8") as file:
        return list(set(word.strip() for word in file))

def check_directory(site, word):
    url = f"{site}/{word}"
    response = requests.get(url)
    if response.status_code == 200:
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        print(f"\r[\033[1;32m{timestamp}\033[0;0m] [+] Directory Found ===> {url}")

def check_directories(site, wordlist):
    print(f"==========Searching in {site}==========")
    print()
    with ThreadPoolExecutor(max_workers=10) as executor:
        executor.map(lambda word: check_directory(site, word), wordlist)

def check_subdomain(protocol, word, domain):
    subdomain = f"{protocol}://{word}.{domain}"
    try:
        response = requests.get(subdomain)
        if response.status_code == 200:
            timestamp = datetime.datetime.now().strftime("%H:%M:%S")
            print(f"\r[\033[1;32m{timestamp}\033[0;0m] [+] Subdomain Found =====> {subdomain}")
    except requests.RequestException:
        pass

def check_subdomains(site, wordlist):
    protocol, domain = site.split("://")
    print(f"==========[+]Searching Subdomains in {site}==========")
    print()
    with ThreadPoolExecutor(max_workers=10) as executor:
        executor.map(lambda word: check_subdomain(protocol, word, domain), wordlist)

def check_file(site, word, ext):
    url = f"{site}/{word}{ext}"
    response = requests.get(url)
    if response.status_code == 200:
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        print(f"\r[\033[1;32m{timestamp}\033[0;0m][+] File Found ===> {url}")

def check_files(site, wordlist, ext):
    print(f"==========[+]Starting Search for Files {ext}==========")
    print()
    with ThreadPoolExecutor(max_workers=10) as executor:
        executor.map(lambda word: check_file(site, word, ext), wordlist)

def main():
    parser = argparse.ArgumentParser(description="Script for scanning directories, subdomains, and files.")
    parser.add_argument("site", help="URL of the site to be checked")
    parser.add_argument("wordlist", nargs="?", default="WebRequestWD.txt", help="Path to the wordlist")
    args = parser.parse_args()

    site = args.site
    wordlist_path = args.wordlist

    try:
        requests.get(site).raise_for_status()
    except requests.RequestException:
        print("[!] Invalid site")
        sys.exit(1)

    menu()
    print("==========INFO==========")
    print(f"[+] Site: \033[1;32m{site}\033[0m")

    valid_extensions = ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'mp3', 'mp4', 'svg', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'zip', 'json', 'php', 'css', 'html', 'htm', 'txt', 'asp', 'aspx', 'xml', 'csv', 'rtf', 'odt', 'ods', 'odp', 'tar', 'gz', 'bz2', 'rar', '7z', 'sql', 'py', 'java', 'cpp', 'h', 'rb', 'phtml', 'twig', 'scss', 'less', 'cgi', 'jsx', 'tsx', 'vue', 'swift', 'go', 'yaml', 'yml', 'sh']
    ext = input("[?] Extension (Enter for default): ").strip()
    if ext not in valid_extensions:
        print("[!] Default extension added (\033[1;32m.txt\033[0m)")
        ext = ".txt"
    else:
        ext = f".{ext}"
        print(f"[+] Extension: \033[1;32m{ext}\033[0m")

    if not os.path.exists(wordlist_path):
        print("\033[1;31m[!] Invalid wordlist provided\033[0m")
        sys.exit(1)

    wordlist = load_wordlist(wordlist_path)

    check_directories(site, wordlist)
    check_subdomains(site, wordlist)
    check_files(site, wordlist, ext)

if __name__ == "__main__":
    main()
